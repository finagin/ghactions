name: Build and Publish Docker Image

on:
  push:
    tags: [ "*" ]
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]
  schedule: [ { cron: '0 0 * * *' } ]

jobs:
  docker-build-and-push:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to the Docker Hub Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        env:
          DOCKER_PUBLISH_PR: ${{ vars.DOCKER_PUBLISH_PR }}
        with:
          images: |
            ${{ github.repository }}
            ghcr.io/${{ github.repository }}
          tags: |
            type=schedule,pattern=nightly
            type=ref,event=branch
            type=ref,event=pr,enable=${{ env.DOCKER_PUBLISH_PR == 'true' }}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/0.') }}
            type=sha,enable=${{ github.event_name != 'pull_request' }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        id: push
        if: ${{ steps.meta.outputs.version }}
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Notify
        id: notify
        if: ${{ steps.meta.outputs.version }}
        continue-on-error: true
        env:
          JOB_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/job/${{ github.job }}
          MESSAGE: |
            Docker image `${{ github.repository }}:${{ steps.meta.outputs.version }}` 
            have been [built](${{ env.JOB_URL }}) and [pushed](${{ env.JOB_URL }}) successfully\\.
        shell: bash
        run: |
          curl -s -X POST \
            -H 'Content-Type: application/json' \
            -d '{
              "chat_id": ${{ secrets.TELEGRAM_CHAT_ID }},
              "text": "${{ env.MESSAGE }}",
              "parse_mode": "MarkdownV2"
            }' \
            https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage
